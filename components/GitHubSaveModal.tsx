import React, { useState, useEffect } from 'react';
import GitHubIcon from './icons/GitHubIcon';

interface GitHubSaveModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (details: { repoName?: string, description?: string, commitMessage: string }) => void;
  isNewRepo: boolean;
}

const GitHubSaveModal: React.FC<GitHubSaveModalProps> = ({ isOpen, onClose, onSave, isNewRepo }) => {
  const [repoName, setRepoName] = useState('');
  const [description, setDescription] = useState('');
  const [commitMessage, setCommitMessage] = useState('feat: Initial commit');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (isOpen) {
        // Reset state when modal opens
        setError(null);
        if (isNewRepo) {
            setRepoName('');
            setDescription('');
            setCommitMessage('feat: Initial commit');
        } else {
            setCommitMessage('feat: Update application files');
        }
    }
  }, [isOpen, isNewRepo]);
  
  if (!isOpen) return null;

  const handleSaveClick = () => {
    if (isNewRepo && !repoName.trim()) {
        setError("Repository name is required.");
        return;
    }
    if (!commitMessage.trim()) {
        setError("Commit message is required.");
        return;
    }
    onSave({
        repoName: isNewRepo ? repoName.trim() : undefined,
        description: isNewRepo ? description.trim() : undefined,
        commitMessage: commitMessage.trim(),
    });
  };
  
  const validateRepoName = (name: string) => {
    // Basic validation for GitHub repo names
    if (!/^[a-zA-Z0-9_.-]+$/.test(name) && name) {
      setError("Repo name can only contain letters, numbers, hyphens, underscores, and periods.");
    } else {
      setError(null);
    }
    setRepoName(name);
  };


  return (
    <div 
        className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm animate-fade-in"
        onClick={onClose}
    >
      <div 
        className="bg-slate-800 border border-slate-700 rounded-2xl shadow-2xl p-8 m-4 max-w-lg w-full transform transition-transform duration-300 scale-95 animate-scale-in"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center gap-3 mb-6">
            <GitHubIcon className="h-7 w-7 text-white" />
            <h2 className="text-2xl font-bold text-white">
                {isNewRepo ? 'Create New GitHub Repository' : 'Commit Changes'}
            </h2>
        </div>

        {isNewRepo && (
            <div className="space-y-4 mb-6">
                <div>
                    <label htmlFor="repo-name" className="block text-sm font-medium text-slate-300 mb-2">Repository Name</label>
                    <input
                        id="repo-name"
                        type="text"
                        value={repoName}
                        onChange={(e) => validateRepoName(e.target.value)}
                        placeholder="my-ai-generated-app"
                        className="w-full p-3 bg-white/[0.05] border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                </div>
                <div>
                    <label htmlFor="repo-desc" className="block text-sm font-medium text-slate-300 mb-2">Description (Optional)</label>
                    <input
                        id="repo-desc"
                        type="text"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        placeholder="A cool app generated by AI"
                        className="w-full p-3 bg-white/[0.05] border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                </div>
            </div>
        )}

        <div>
            <label htmlFor="commit-message" className="block text-sm font-medium text-slate-300 mb-2">Commit Message</label>
            <input
                id="commit-message"
                type="text"
                value={commitMessage}
                onChange={(e) => setCommitMessage(e.target.value)}
                className="w-full p-3 bg-white/[0.05] border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
        </div>
        
        {error && <p className="text-red-400 text-sm mt-4">{error}</p>}

        <div className="mt-8 flex justify-end gap-4">
            <button 
                onClick={onClose}
                className="px-5 py-2 text-sm font-semibold bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors"
            >
                Cancel
            </button>
            <button 
                onClick={handleSaveClick}
                className="px-5 py-2 text-sm font-semibold bg-indigo-600 hover:bg-indigo-500 text-white rounded-lg transition-colors"
            >
                {isNewRepo ? 'Create & Commit' : 'Commit'}
            </button>
        </div>
      </div>
      <style>{`
        @keyframes fade-in { from { opacity: 0; } to { opacity: 1; } }
        @keyframes scale-in { from { transform: scale(0.95); opacity: 0; } to { transform: scale(1); opacity: 1; } }
        .animate-fade-in { animation: fade-in 0.3s ease-out forwards; }
        .animate-scale-in { animation: scale-in 0.3s ease-out forwards; }
      `}</style>
    </div>
  );
};

export default GitHubSaveModal;
